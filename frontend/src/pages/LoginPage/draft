// import React from "react";
// import { useNavigate } from "react-router-dom";
// import axios from "axios";
// import { useAuth } from "../../Context/useAuth";
// import { useForm } from "react-hook-form";

// interface LoginFormInputs {
//   userName: string;
//   password: string;
// }

// const LoginPage: React.FC = () => {
//   const { setIsLoggedIn, backendUrl } = useAuth();
//   const navigate = useNavigate();

//   // Setup react-hook-form
//   const {
//     register,
//     handleSubmit,
//     formState: { errors },
//   } = useForm<LoginFormInputs>();

//   const onSubmit = async (data: LoginFormInputs) => {
//     try {
//       const response = await axios.post(`${backendUrl}/login`, {
//         email: data.userName, // assuming backend expects email here, or adjust accordingly
//         password: data.password,
//       });

//       if (response.status === 200) {
//         const { token, user } = response.data;

//         // Save token and user data to localStorage
//         localStorage.setItem("token", token);
//         localStorage.setItem("user", JSON.stringify(user));

//         // Update auth context state
//         setIsLoggedIn(true);

//         // Redirect to dashboard
//         navigate("/dashboard");
//       } else {
//         alert("Login failed. Please check your credentials.");
//       }
//     } catch (err: any) {
//       alert(err.response?.data?.message || "An error occurred. Please try again.");
//     }
//   };




  
// // import React, { useContext } from "react";
// // import * as Yup from "yup";
// // import { yupResolver } from "@hookform/resolvers/yup";
// // import { useAuth } from "../../Context/useAuth";
// // import { useForm } from "react-hook-form";
// // import "./LoginPage.css";
// // type Props = {};

// // type LoginFormsInputs = {
// //   userName: string;
// //   password: string;
// // };



// // const validation = Yup.object().shape({
// //   userName: Yup.string().required("Username is required*"),
// //   password: Yup.string().required("Password is required*"),
// // });

// // const LoginPage = (props: Props) => {
// //   const { loginUser } = useAuth();
// //   const {
// //     register,
// //     handleSubmit,
// //     formState: { errors },
// //   } = useForm<LoginFormsInputs>({ resolver: yupResolver(validation) });

// //   const handleLogin = (form: LoginFormsInputs) => {
// //     loginUser(form.userName, form.password);
// //   };

//   return (
//     <div className="form-container">
//       <form className="form" onSubmit={handleSubmit(onSubmit)}>
//          <h1 className="login-title">Login</h1>


//       <label htmlFor="userName" className="flex-column">
//         Username
//       </label>


//         <div className="inputForm">

//           <input
//             type="text"
//             id="userName"
//             placeholder="Username"
//             {...register("userName")}
//             className="input"
//           />
//         </div>
//         {errors.userName && <p className="error">{errors.userName.message}</p>}

//         <label htmlFor="password" className="flex-column">
//           Password
//         </label>

//         <div className="inputForm">
//           <input
//             type="password"
//             id="password"
//             placeholder="••••••••"
//             {...register("password")}
//             className="input"
//           />
//         </div>
//         {errors.password && <p className="error">{errors.password.message}</p>}

//         <div className="flex-row">
//           <a href="/reset-password" className="span">
//             Forgot password?
//           </a>
//         </div>

//         <button type="submit" className="button-submit">
//           Sign in
//         </button>

//         <p className="p">
//           Don’t have an account yet?{" "}
//           <a href="/register" className="span">
//             Sign up
//           </a>
//         </p>
//       </form>
//     </div>
//   );
// };

// export default LoginPage;
